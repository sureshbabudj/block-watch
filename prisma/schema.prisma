generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  password          String
  firstName         String
  lastName          String
  address           String
  gender            String?
  dateOfBirth       DateTime?
  profilePicture    String?
  bio               String?
  emergencyContacts EmergencyContact[]
  neighborhoods     Neighborhood[]
  posts             Post[]
  comments          Comment[]          @relation("UserComments")
  sentMessages      Message[]          @relation("SentMessages")
  receivedMessages  Message[]          @relation("ReceivedMessages")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  sessions          Session[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model EmergencyContact {
  id     String @id @default(uuid())
  name   String
  phone  String
  email  String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Neighborhood {
  id          String   @id @default(uuid())
  name        String
  boundaries  String
  description String
  rules       String
  users       User[]
  posts       Post[]
  events      Event[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Alert       Alert[]
}

model Post {
  id             String       @id @default(uuid())
  content        String
  authorId       String
  author         User         @relation(fields: [authorId], references: [id])
  neighborhoodId String
  neighborhood   Neighborhood @relation(fields: [neighborhoodId], references: [id])
  comments       Comment[]
  likes          Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  authorId  String
  author    User     @relation("UserComments", fields: [authorId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id         String   @id @default(uuid())
  content    String
  senderId   String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Alert {
  id             String       @id @default(uuid())
  type           String
  message        String
  neighborhoodId String
  neighborhood   Neighborhood @relation(fields: [neighborhoodId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Event {
  id             String       @id @default(uuid())
  title          String
  description    String
  date           DateTime
  time           String
  neighborhoodId String
  neighborhood   Neighborhood @relation(fields: [neighborhoodId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model SafetyTip {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
